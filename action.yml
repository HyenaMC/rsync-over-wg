name: 'Rsync over WireGuard'
description: 'Connect to WireGuard and deploy files via rsync with optional pre/post SSH commands'
author: 'kpAjun @HyenaMC'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  # WireGuard: provide full wg config content
  wg_config_file:
    description: 'WireGuard configuration file content (ini text as in wg-quick)'
    required: true

  # Remote host reachable over WireGuard
  remote_host:
    description: 'Remote host or IP to connect to over WireGuard'
    required: true

  # SSH authentication for remote host
  ssh_username:
    description: 'SSH username for remote host'
    required: true
  ssh_private_key:
    description: 'SSH private key (PEM/OpenSSH text)'
    required: true
  ssh_port:
    description: 'SSH port on remote host'
    required: false
    default: '22'

  # Rsync parameters
  source:
    description: 'Local source path (relative to repo)'
    required: false
    default: './'
  target:
    description: 'Remote target path'
    required: true
  rsync_args:
    description: 'Base rsync arguments'
    required: false
    default: '-az'
  rsync_args_more:
    description: 'Additional rsync arguments appended to rsync_args'
    required: false
    default: ''
  verbose:
    description: 'Enable verbose logs from rsync action'
    required: false
    default: 'false'

  # Rsync filter
  rsync_filter_path:
    description: 'Path to an rsync filter file in the repository; defaults to built-in action/rsync-filter'
    required: false
    default: ''

  # Optional remote hooks
  pre_script:
    description: 'Remote shell script to run before rsync'
    required: false
    default: ''
  post_script:
    description: 'Remote shell script to run after rsync'
    required: false
    default: ''

  # Auto-install rsync on remote if missing
  auto_install_rsync_on_target:
    description: 'If true, attempts to install rsync on the remote host when not present'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up WireGuard (wg-quick)
      uses: niklaskeerl/easy-wireguard-action@v2
      with:
        WG_CONFIG_FILE: ${{ inputs.wg_config_file }}

    - name: Verify WireGuard link
      shell: bash
      run: |
        set -e
        sudo wg show || true
        ping -c 3 ${{ inputs.remote_host }} || true

    - name: Prepare rsync filter
      shell: bash
      run: |
        set -e
        # Determine filter source
        if [ -n "${{ inputs.rsync_filter_path }}" ] && [ -f "${{ inputs.rsync_filter_path }}" ]; then
          echo "Using custom rsync filter: ${{ inputs.rsync_filter_path }}"
          cp "${{ inputs.rsync_filter_path }}" .rsync-filter
        else
          echo "Using built-in default filter: action/rsync-filters"
          cp "${{ github.action_path }}/action/rsync-filters" .rsync-filter
        fi
        echo "Final .rsync-filter contents:" && cat .rsync-filter

    - name: Pre-sync remote commands
      if: ${{ inputs.pre_script != '' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.remote_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          set -e
          ${{ inputs.pre_script }}

    - name: Ensure rsync on remote
      if: ${{ inputs.auto_install_rsync_on_target == 'true' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.remote_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          set -e
          if command -v rsync >/dev/null 2>&1; then
            echo "rsync already installed on remote."
            exit 0
          fi
          echo "rsync not found on remote; attempting installation..."
          # Determine sudo availability (no sudo if already root)
          SUDO=""
          if [ "$(id -u)" != "0" ] && command -v sudo >/dev/null 2>&1; then
            SUDO="sudo"
          fi
          # Try common package managers
          if command -v apt-get >/dev/null 2>&1; then
            DEBIAN_FRONTEND=noninteractive $SUDO apt-get update -y
            DEBIAN_FRONTEND=noninteractive $SUDO apt-get install -y rsync
          elif command -v apt >/dev/null 2>&1; then
            DEBIAN_FRONTEND=noninteractive $SUDO apt update -y
            DEBIAN_FRONTEND=noninteractive $SUDO apt install -y rsync
          elif command -v yum >/dev/null 2>&1; then
            $SUDO yum install -y rsync
          elif command -v dnf >/dev/null 2>&1; then
            $SUDO dnf install -y rsync
          elif command -v zypper >/dev/null 2>&1; then
            $SUDO zypper -n install rsync
          elif command -v apk >/dev/null 2>&1; then
            $SUDO apk add --no-cache rsync
          elif command -v pacman >/dev/null 2>&1; then
            $SUDO pacman -Sy --noconfirm rsync
          elif command -v opkg >/dev/null 2>&1; then
            $SUDO opkg update
            $SUDO opkg install rsync
          elif command -v brew >/dev/null 2>&1; then
            # Homebrew typically doesn't use sudo
            brew install rsync
          else
            echo "No supported package manager found; please install rsync manually." >&2
            exit 1
          fi
          if command -v rsync >/dev/null 2>&1; then
            echo "rsync successfully installed on remote."
          else
            echo "Failed to install rsync on remote." >&2
            exit 1
          fi

    - name: Rsync deploy
      uses: up9cloud/action-rsync@master
      env:
        HOST: ${{ inputs.remote_host }}
        USER: ${{ inputs.ssh_username }}
        KEY: ${{ inputs.ssh_private_key }}
        PORT: ${{ inputs.ssh_port }}
        SOURCE: ${{ inputs.source }}
        TARGET: ${{ inputs.target }}
        VERBOSE: ${{ inputs.verbose }}
        ARGS: ${{ inputs.rsync_args }}
        ARGS_MORE: "--exclude='/.rsync-filter' --exclude='/wg0.conf' --filter='merge .rsync-filter' ${{ inputs.rsync_args_more }}"

    - name: Post-sync remote commands
      if: ${{ inputs.post_script != '' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.remote_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          set -e
          ${{ inputs.post_script }}

    - name: Disconnect WireGuard
      if: ${{ always() }}
      shell: bash
      run: |
        set -e
        # Show current WireGuard interfaces (for logs)
        if command -v wg >/dev/null 2>&1; then
          echo "Existing WireGuard interfaces before teardown:"
          sudo wg show || true
          ifaces=$(sudo wg show interfaces 2>/dev/null || true)
          for i in $ifaces; do
            if [ -n "$i" ]; then
              echo "Bringing down WireGuard interface: $i"
              if ! sudo wg-quick down "$i"; then
                echo "wg-quick down failed for $i; trying to remove link and routes manually"
                # Kill wg device to ensure no residual tunnel stays up
                sudo ip link set dev "$i" down 2>/dev/null || true
                sudo ip link delete "$i" 2>/dev/null || true
                # Remove any routes that still reference the interface
                for cidr in $(ip -o route | awk '/ dev '\''"$i"'\''/ {print $1}'); do
                  sudo ip route del "$cidr" dev "$i" 2>/dev/null || true
                done
              fi
            fi
          done
        fi
        # Print routes after teardown (helps diagnose default route issues)
        ip route || true

    - name: Cleanup WireGuard config file cache
      if: ${{ always() }}
      shell: bash
      run: |
        set -e
        rm -f wg0.conf || true